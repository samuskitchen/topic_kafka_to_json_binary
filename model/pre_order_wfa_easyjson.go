// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36d112d1DecodeDemosExamplesModel(in *jlexer.Lexer, out *PreOrderWorkForceApp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_unique_id":
			out.MessageUniqueID = string(in.String())
		case "invoice_id":
			out.InvoiceID = string(in.String())
		case "client_id":
			out.ClientID = string(in.String())
		case "created_by":
			out.CreatedBy = string(in.String())
		case "finger_print":
			out.FingerPrint = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lng":
			out.Lng = float64(in.Float64())
		case "channel":
			out.Channel = string(in.String())
		case "purchase_date":
			out.PurchaseDate = string(in.String())
		case "route":
			out.Route = int(in.Int())
		case "block_reason":
			out.BlockReason = string(in.String())
		case "payment_condition":
			out.PaymentCondition = string(in.String())
		case "payment_method":
			out.PaymentMethod = string(in.String())
		case "payment_type":
			out.PaymentType = string(in.String())
		case "transaction_type":
			out.TransactionType = string(in.String())
		case "order_type":
			out.OrderType = int(in.Int())
		case "delivery_date":
			out.DeliveryDate = string(in.String())
		case "customer_phone":
			out.CustomerPhone = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "retry":
			out.Retry = int(in.Int())
		case "createWfa":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreateWfa).UnmarshalJSON(data))
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]OrderWfaItems, 0, 0)
					} else {
						out.Items = []OrderWfaItems{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OrderWfaItems
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bonuses":
			if in.IsNull() {
				in.Skip()
				out.Bonuses = nil
			} else {
				in.Delim('[')
				if out.Bonuses == nil {
					if !in.IsDelim(']') {
						out.Bonuses = make([]BonusesWfaItems, 0, 0)
					} else {
						out.Bonuses = []BonusesWfaItems{}
					}
				} else {
					out.Bonuses = (out.Bonuses)[:0]
				}
				for !in.IsDelim(']') {
					var v2 BonusesWfaItems
					(v2).UnmarshalEasyJSON(in)
					out.Bonuses = append(out.Bonuses, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36d112d1EncodeDemosExamplesModel(out *jwriter.Writer, in PreOrderWorkForceApp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_unique_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageUniqueID))
	}
	{
		const prefix string = ",\"invoice_id\":"
		out.RawString(prefix)
		out.String(string(in.InvoiceID))
	}
	{
		const prefix string = ",\"client_id\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"finger_print\":"
		out.RawString(prefix)
		out.String(string(in.FingerPrint))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lng\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lng))
	}
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"purchase_date\":"
		out.RawString(prefix)
		out.String(string(in.PurchaseDate))
	}
	{
		const prefix string = ",\"route\":"
		out.RawString(prefix)
		out.Int(int(in.Route))
	}
	{
		const prefix string = ",\"block_reason\":"
		out.RawString(prefix)
		out.String(string(in.BlockReason))
	}
	{
		const prefix string = ",\"payment_condition\":"
		out.RawString(prefix)
		out.String(string(in.PaymentCondition))
	}
	{
		const prefix string = ",\"payment_method\":"
		out.RawString(prefix)
		out.String(string(in.PaymentMethod))
	}
	{
		const prefix string = ",\"payment_type\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	{
		const prefix string = ",\"transaction_type\":"
		out.RawString(prefix)
		out.String(string(in.TransactionType))
	}
	{
		const prefix string = ",\"order_type\":"
		out.RawString(prefix)
		out.Int(int(in.OrderType))
	}
	{
		const prefix string = ",\"delivery_date\":"
		out.RawString(prefix)
		out.String(string(in.DeliveryDate))
	}
	{
		const prefix string = ",\"customer_phone\":"
		out.RawString(prefix)
		out.String(string(in.CustomerPhone))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Retry != 0 {
		const prefix string = ",\"retry\":"
		out.RawString(prefix)
		out.Int(int(in.Retry))
	}
	if true {
		const prefix string = ",\"createWfa\":"
		out.RawString(prefix)
		out.Raw((in.CreateWfa).MarshalJSON())
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Items {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bonuses\":"
		out.RawString(prefix)
		if in.Bonuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Bonuses {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreOrderWorkForceApp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36d112d1EncodeDemosExamplesModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreOrderWorkForceApp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36d112d1EncodeDemosExamplesModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreOrderWorkForceApp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36d112d1DecodeDemosExamplesModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreOrderWorkForceApp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36d112d1DecodeDemosExamplesModel(l, v)
}
func easyjson36d112d1DecodeDemosExamplesModel1(in *jlexer.Lexer, out *OrderWfaItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "material":
			out.Material = string(in.String())
		case "promotion_code":
			out.PromotionCode = string(in.String())
		case "quantity":
			out.Quantity = int(in.Int())
		case "sales_unit":
			out.SalesUnit = string(in.String())
		case "delivery_priority":
			out.DeliveryPriority = int(in.Int())
		case "usage":
			out.Usage = string(in.String())
		case "suggested_order":
			out.SuggestedOrder = bool(in.Bool())
		case "suggested_order_origen":
			out.SuggestedOrderOrigen = string(in.String())
		case "payment_type":
			out.PaymentType = string(in.String())
		case "invoice_id":
			out.InvoiceID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36d112d1EncodeDemosExamplesModel1(out *jwriter.Writer, in OrderWfaItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix[1:])
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"promotion_code\":"
		out.RawString(prefix)
		out.String(string(in.PromotionCode))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	if in.SalesUnit != "" {
		const prefix string = ",\"sales_unit\":"
		out.RawString(prefix)
		out.String(string(in.SalesUnit))
	}
	{
		const prefix string = ",\"delivery_priority\":"
		out.RawString(prefix)
		out.Int(int(in.DeliveryPriority))
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		out.String(string(in.Usage))
	}
	{
		const prefix string = ",\"suggested_order\":"
		out.RawString(prefix)
		out.Bool(bool(in.SuggestedOrder))
	}
	{
		const prefix string = ",\"suggested_order_origen\":"
		out.RawString(prefix)
		out.String(string(in.SuggestedOrderOrigen))
	}
	{
		const prefix string = ",\"payment_type\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	{
		const prefix string = ",\"invoice_id\":"
		out.RawString(prefix)
		out.String(string(in.InvoiceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderWfaItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36d112d1EncodeDemosExamplesModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderWfaItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36d112d1EncodeDemosExamplesModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderWfaItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36d112d1DecodeDemosExamplesModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderWfaItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36d112d1DecodeDemosExamplesModel1(l, v)
}
func easyjson36d112d1DecodeDemosExamplesModel2(in *jlexer.Lexer, out *MessageUniqueAndType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages_uniq_id":
			out.MessageUniqueID = string(in.String())
		case "doc_type":
			out.DocType = string(in.String())
		case "payment_type":
			out.PaymentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36d112d1EncodeDemosExamplesModel2(out *jwriter.Writer, in MessageUniqueAndType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages_uniq_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageUniqueID))
	}
	{
		const prefix string = ",\"doc_type\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	{
		const prefix string = ",\"payment_type\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageUniqueAndType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36d112d1EncodeDemosExamplesModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageUniqueAndType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36d112d1EncodeDemosExamplesModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageUniqueAndType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36d112d1DecodeDemosExamplesModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageUniqueAndType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36d112d1DecodeDemosExamplesModel2(l, v)
}
func easyjson36d112d1DecodeDemosExamplesModel3(in *jlexer.Lexer, out *InfoOrderType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages_uniq_id":
			out.MessageUniqueID = string(in.String())
		case "doc_type":
			out.DocType = string(in.String())
		case "payment_type":
			out.PaymentType = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36d112d1EncodeDemosExamplesModel3(out *jwriter.Writer, in InfoOrderType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages_uniq_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageUniqueID))
	}
	{
		const prefix string = ",\"doc_type\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	{
		const prefix string = ",\"payment_type\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InfoOrderType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36d112d1EncodeDemosExamplesModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InfoOrderType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36d112d1EncodeDemosExamplesModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InfoOrderType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36d112d1DecodeDemosExamplesModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InfoOrderType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36d112d1DecodeDemosExamplesModel3(l, v)
}
func easyjson36d112d1DecodeDemosExamplesModel4(in *jlexer.Lexer, out *BonusesWfaItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "material":
			out.Material = string(in.String())
		case "quantity":
			out.Quantity = int(in.Int())
		case "unit_measure":
			out.UnitMeasure = string(in.String())
		case "usage":
			out.Usage = string(in.String())
		case "group_bonus":
			out.BonusGroup = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36d112d1EncodeDemosExamplesModel4(out *jwriter.Writer, in BonusesWfaItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix[1:])
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	if in.UnitMeasure != "" {
		const prefix string = ",\"unit_measure\":"
		out.RawString(prefix)
		out.String(string(in.UnitMeasure))
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		out.String(string(in.Usage))
	}
	{
		const prefix string = ",\"group_bonus\":"
		out.RawString(prefix)
		out.String(string(in.BonusGroup))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BonusesWfaItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36d112d1EncodeDemosExamplesModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BonusesWfaItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36d112d1EncodeDemosExamplesModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BonusesWfaItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36d112d1DecodeDemosExamplesModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BonusesWfaItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36d112d1DecodeDemosExamplesModel4(l, v)
}
